using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Day18
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(Helper(EXAMPLE_INPUT_1, false));
            Console.WriteLine(Helper(EXAMPLE_INPUT_2, false));

            Console.WriteLine(PROBLEM_INPUT.Split('\n', StringSplitOptions.RemoveEmptyEntries).Select(e => Helper(e, false)).Sum());

            Console.WriteLine(Helper(EXAMPLE_INPUT_1, true));
            Console.WriteLine(Helper(EXAMPLE_INPUT_2, true));

            Console.WriteLine(PROBLEM_INPUT.Split('\n', StringSplitOptions.RemoveEmptyEntries).Select(e => Helper(e, true)).Sum());

            Console.WriteLine("Hello World!");
        }

        static long Helper(string input, bool resolveMultiplicationsFirst)
        {
            input = input.Trim();
            // Resolve all brackets first until none remain
            while (input.Contains("("))
            {
                long bracketLevel = 0;
                List<(long idx, long brktLevel, char leftRightBrkt)> bracketLevelList = new List<(long idx, long brktLevel, char leftRightBrkt)>();
                

                for(int i = 0; i < input.Length; i++)
                {
                    if (input[i] == '(')
                    {
                        bracketLevelList.Add((i, ++bracketLevel, '('));
                    }
                    else if (input[i] == ')')
                    {
                        bracketLevelList.Add((i, bracketLevel--, ')'));
                    }
                }

                if (bracketLevelList.Count == 0)
                {
                    break;
                }

                // Get highest bracket level and then resolve that 
                var highestBracketLevel = bracketLevelList.Max(e => e.brktLevel);

                long? innerMostLeftBracket = null;
                long? innerMostRightBracket = null;
                foreach (var brkt in bracketLevelList)
                {
                    if (brkt.brktLevel == highestBracketLevel)
                    {
                        if (brkt.leftRightBrkt == '(')
                            innerMostLeftBracket = brkt.idx;
                        else if (brkt.leftRightBrkt == ')')
                        {
                            // Done because this will be the second bracket
                            innerMostRightBracket = brkt.idx;
                            break;
                        }
                    }
                }

                var sum = ResolveUnbracketedExpression(input.Substring((int)innerMostLeftBracket + 1, (int)(innerMostRightBracket - innerMostLeftBracket - 1)), resolveMultiplicationsFirst);
                input = input.Substring(0, (int)innerMostLeftBracket) + sum.ToString() + input.Substring((int)innerMostRightBracket + 1);

            }

            return ResolveUnbracketedExpression(input, resolveMultiplicationsFirst);
        }

        private static long ResolveUnbracketedExpression(string input, bool resolveAdditionFirst)
        {
            // Will be a series of + and * operators
            var digitsRegex = Regex.Matches(input, @"\d+");
            var numbers = digitsRegex.Select(e => long.Parse(e.Value)).ToList();
            var operatorsRegex = Regex.Matches(input, @"[+*]");
            var operators = operatorsRegex.Select(e => e.Value).ToList();

            if (operators.Count != numbers.Count - 1)
                throw new Exception("Operator digits mismatch");

            var sum = (long) 0;
            if (!resolveAdditionFirst)
            {
                for (int i = 0; i < operators.Count; i++)
                {
                    var num = numbers[i + 1];
                    if (operators[i] == "+")
                        sum += num;
                    else if (operators[i] == "*")
                        sum *= num;
                    else
                        throw new Exception("Unrecognized operator");
                }
            }
            else
            {
                var multIdx = operators.IndexOf("+");
                while (multIdx != -1)
                {
                    numbers[multIdx] += numbers[multIdx + 1];

                    numbers.RemoveAt(multIdx + 1);
                    operators.RemoveAt(multIdx);

                    multIdx = operators.IndexOf("+");
                }
                sum = numbers.Count > 1 ? numbers.Aggregate((e, g) => e * g) : numbers[0];
            }

            return sum;
        }

        const string EXAMPLE_INPUT_1 = @"1 + 2 * 3 + 4 * 5 + 6";
        const string EXAMPLE_INPUT_2 = @"((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2";

        const string PROBLEM_INPUT = @"(7 * (7 * 6 * 4 + 3)) * 3 + ((8 + 5 * 3 + 7 + 8) + 3 * (2 + 9 * 5 + 7 * 5 * 6) * 2 + 3 * 9) + (4 + 5 + 5 * 2 + 2) + ((5 + 6 + 9 + 6) + 3 + 4 * 6 * 5)
7 * 5
(9 * (9 + 7) * 7 + (4 + 5 * 5 + 2 + 3) + 3) * 7 * 5 + 8 + (4 + (7 + 9 + 6 * 9) * 2)
((6 + 4) * 6 * (5 + 3) * 9 * (3 * 5 * 5 * 9 * 4 + 9) * 4) * 2 * 8 + 9
7 * 7 + (9 + 2 * 9 + 9)
9 + (7 * 7 * 5 * 9 * 7) * 2 + 3 * 3
5 * (5 * (8 * 4) * 7 + 8 + 7) * (5 * (4 * 3 * 5 + 2 * 5) + (6 * 6 * 7 * 2 + 2) + 4) + (5 + 4 * 7 + 5 * 9 + 9) * 2
((7 + 3 + 8) + (2 + 6 * 4 * 5)) + 8
8 * (6 * 7 + 3 * (8 * 5 * 2 * 4)) * (3 + (5 + 5 + 6) * (4 * 3 + 7 * 5 + 7) + (3 * 5 * 9 * 3)) + 8
6 + 4 + 8 + 4 * ((3 + 5 * 8) + 7 * 7 * 8 * 7 * 2)
3 * (9 + 4) * (9 + 2 + 6 + 5) + 4 * (7 * 2) + 6
4 * 6 + (8 + 3) + 7
2 + (8 * (5 + 6 * 5) + 9 * 7 + (7 * 7)) + 5 + 5
(8 + (5 * 7 * 3 + 6) + 8) * 8 + 6
8 * 6 * 6
8 * 6 + (9 + 4 * 5 * 3) * 9 * (4 * 2 + 6 + 7 + 4 * 8)
(5 * 9 * 8 * 9 * 6) * 8
7 * 5 + ((2 * 7 * 5 + 2 + 6 + 3) * 9) * 5 + ((2 * 2 * 4 + 3) * 5)
(2 + 3 * 4 * (2 + 4 * 9 + 8) * 8) + 6 + 8 + 7 * 2
3 + 7 + (3 * 4 * (8 * 6 + 8 * 8 * 2 + 9)) * 4
9 * 9 + 9 + (3 * 7 * 9 * 4)
(7 * 7 + (2 * 5 * 8) * 4) * 9 + (9 + 4 * 8 * (9 + 3 * 5 * 4 * 7 * 4)) + 3 * 3
7 + 6 + 3 * 8 * 4 * (9 * 4 * (5 + 7 * 2 * 8 + 7 * 8))
(7 + 2) * 5 * 8 + 6 * 2
9 + 4 + (5 + (7 * 7 * 9 + 5) + 6 * 5 + 2 * (4 * 7 * 7 + 8 * 5 * 5)) * 2 + 2
8 + 2 * 2 * (2 + (2 + 7 + 7 * 7 * 3) + 7)
3 + 4 * (3 + 3 * 3 + 4) * 9 * 6 + 8
((4 + 4 + 6) + (5 * 5 + 4 * 9 * 5) + 5) + 2 * 2
9 * 5 * 6 * 2 + 6 + (2 * 9 + (2 * 3 + 4))
(3 * 9) + 2 * (2 * 5 + 7 + 9 * 7 * 6) + 5 * 5 * 2
7 + 3 + 5 * 6
7 + 5 + (2 * 8 + (6 * 6) + 6) + (4 + 7)
2 * (9 + 5 * 3 + 5 + 5 + 4) * (3 + 4 + 3 + 5 + 2 + 7) + 2 * 2
(4 * 5 + 6 * 3 + (5 * 3)) * 5 + 5
9 + 8 + 7 * (7 + 9 + 2 * 2 + 7) * 7
3 * 3 * ((4 + 3 * 4 * 2 * 2 * 6) * (9 + 6) * 3) * 5
9 + 6 + 7 + 6
8 * (4 * 8 * 8 * 7 + 4 + 9)
2 + (7 * 9 * 2) + 6 * 6 * 4 * 6
((4 * 6 + 7 + 9 * 4) + 9) * 4 * ((6 * 3 + 3 + 9 * 7) * 8 * 4 * 5 * (2 * 6 * 8 * 5 + 5 * 3)) * 7
(4 * 7) + 5
6 + 9 * 6 + 9 + ((5 + 7 * 5 * 8) + 7 + 7 + 8 * (2 + 8 * 2 * 4 * 7 + 9) * 7)
6 + 3 + (9 + 6 * (4 + 7 + 4 * 6 * 7)) + 6
5 * 7 * (4 * 6 * (3 + 8 + 6 * 8)) + 8
(5 * 6) * 8 + 2 * 3 + (7 + 4 + 3)
3 + 4 * 9 * 2 + (7 + (5 * 9 * 7 + 7 * 4) * 4) + 3
2 * 9 + ((3 + 5 + 2 + 9 * 9 + 6) + 4 + (6 * 4) + 2) + 3
3 + 6 + (3 + 6 + 8 + 2 + 2)
8 * ((8 * 6) + (7 + 2 * 2 * 2 + 4 * 3) * (9 + 8 + 4 * 8) + 8 * 4) + 2
9 + 4 * (7 * (2 * 4 + 9 * 3 + 7) * 8 + (4 * 3 * 9 + 9 * 5 + 7) + 9 * (6 * 4 * 2)) + ((5 + 6 + 7 * 9 * 6 + 6) + (6 * 2 + 8 + 9 + 4 + 4) + (8 * 5 * 2 + 6 + 7) * 5 + 3) * 9 * 8
9 + 2 + (5 + 3 * 2 * (7 + 4 * 5 * 5 + 3 * 7) * 8 * (5 * 6))
7 * (3 + 3 + 7 * 7 * 9) + (2 + 5 * 6 * 4)
9 + 8 + 9
8 * (7 + (5 * 7) + (7 + 3) * 2 + 7) + 4 * 3
2 * (2 * 6 + 5 * 7) * 2 + (3 + 3) * ((2 * 3 + 2) + (5 * 3 * 4 + 8 * 2))
4 * (3 + 7 + 6 + 8 + 3 + 6) + 8 + (2 * 3 * (5 * 2 + 6 + 5 * 8))
2 + 5 + 3 + 2 + 4 + (2 + (6 + 4) + 5)
2 * (4 * 4) + (5 + 2 * (4 + 2 * 2 + 4) * 4 + (5 * 9 * 9) + 2)
(6 + 9 + (3 + 5 * 3) + 4 * 2 * 2) + 7 + ((6 * 6 + 4 * 5 * 5 + 4) + 5) + ((8 + 4 + 9 * 8 * 9 + 2) + (7 + 2 + 9) + 4) + 5
7 * 3 + (6 + (8 * 5) * 6 * 8) * 2 * 9 * 4
9 + 9 + 9 + 2
(7 * 9 * 2 + 8 * 7 * 4) + 9 + (9 * 6 * 9 + 7) * 3 * (9 * 5 * 5)
4 * 7 * ((7 + 9 * 5 * 4 + 7 * 4) + (2 + 3 + 5 * 4 + 2) + (2 + 5 * 8 * 5 * 5 + 6)) * 6
5 + 8 * (9 + (9 + 3 + 9 + 5 + 5))
(3 * 7 * 2 * 3 + (8 + 8 + 3 * 9)) + 8 + 8 * 6 + 8 + 6
9 + 4 + 8 * (7 * 8 + 8 + 4 * 8)
2 * 9 + 2 * (5 + 3) * 2 * (5 * 5 * 8 + (3 + 4 + 4 + 5) + 4 * 4)
5 * 7 + 2 * ((2 * 8 * 8 + 8 * 2 * 7) * 6 * 7 + 7 + 2) * 2 + 9
4 * (6 * (6 * 3 * 3)) * (7 * 5 * 4 * 2 * (5 + 5 + 8 * 3)) + 7 + 7 * 8
3 * 2 + 4
9 + 6 * 2 * 4 + 2
((5 * 5 + 3 + 7 * 2) * 2 * 5 + (9 + 9)) + 3 + 6 * (9 + 8) * 8 * 9
4 * (8 + 2 + 3 * 9 * 6) * 6 * 3
2 * (9 * 6 + (8 + 6 * 4) * (5 * 5) + 9 * 2)
6 + (3 * (6 * 6 + 4 + 5) + 3 * 5 * 4 + (6 + 9 + 4 * 5 * 3)) + 6 * (3 + (6 + 5 + 5 + 6) * 8 + 8 * 4) * 4 + 6
9 * 9 * 2 + (6 * 4 * 2 + 4 * 7 * 9) * 7 + ((5 + 6 + 7 + 7) * (7 * 3 + 9) + 9)
(2 + (6 + 8 + 6 * 5 + 5) + 8 * 5) * 9 + 3
2 * 9 + 2 + (9 * (4 + 6 + 4 + 2) * 9 * 5 + 7 + 2)
8 + 6 + 4 + 6
3 + ((6 * 4 + 2 + 4 + 3 + 8) * (4 * 3) * (9 + 4 * 6 + 2 * 7 * 6)) + 5 + 7
3 * (8 * 4 + 9 + 4) * 7 * 2 + ((5 + 9 * 6 * 4 * 4) * 8 * 4 * (6 + 2))
((8 * 7 + 6) * 3 + 2 + 5) + 8 * 5 * 8
(3 * 2 * 6 * 3 * 2) * 6 * 2 * 9
(4 * 8 * 3 + 5) + (8 + 9) + 7 * 7 + 3 * 3
(2 + 7 * (7 * 8)) + 8 + (6 * (4 * 8) * 4 * 2 * 8) * 4 * ((7 + 8 + 4 + 3 + 6) * 4 + 9 + 4) + 3
((7 + 2 + 3 * 3) * 5 * 5 + 4) + 9 * 2 + 7 + 9 + 2
(6 + (2 + 7)) * 4 + 7 + 8 * 5
(9 * 8) + (8 + (2 + 4 + 5 + 6 * 9) + 2 * (8 + 9))
2 * (9 + 8) * 8 * ((7 * 6 + 7 * 3) + 2 + 5 * (7 * 2 + 7 + 8) + 3 * 3) + 8
4 * 6 + 6 + 4 * 9
(2 + 4 + 5 + 3 + 6) + 3 * 3 * 3 + (5 * 2 * 9 + 6 * 6 + 5)
7 * 5 + (6 + 2 * 2 * 8 + 5) * 6 + 6
(5 + 8 + 2) + 3
3 + 3 * 5 * ((3 + 8 + 5 + 9) * 4 + 4 * 4 + 4) + 8 * 3
2 + (5 + 5 + (6 * 5 * 2 * 8) * 4 + 8)
8 + (5 * 7 * 2 * 2) * (7 + 9 * 5) * 2 + 9 + 4
((9 * 9) + 6 + 4 + 9) * 5
5 + 3 * ((4 + 8) + 9 * 2 * 6 + 7)
6 + 7 + 5 * (2 + 9 * 4 * 5 * 7 + 5) + 9 * 4
(7 * 2 + 4 + (8 * 8 + 2 * 5 * 3 * 6)) + (4 + 4 * 3 + 7) + 4 * 6
2 * (5 * 9 * (5 + 3 * 5) * 5 + 6) + 4 + 5
5 * (4 + 7 + 4)
9 * 7 + 8 + 4 + (6 * (6 * 2 * 4 + 9)) + 5
6 * 3
(5 * 6 + 2 * (2 + 5 * 6 * 4 + 9 + 2)) + (4 + 3 * (9 * 9 + 4 * 8 * 8 * 9) * 4) * (8 + 7 + (4 + 8 * 2 + 4) * 9)
8 * 5 + 9
7 + 4 * 9 * 6 + 6
9 + 6 * (8 * (7 * 6 + 2 + 4 + 6 + 9) * 2 + 2 + 2 + (7 + 7 + 9))
6 * (7 * 6 * 6) * 9 * 6 + 7
(5 * 7 + 9) * 7 + ((4 * 5 + 3) * 5 * (3 + 8 * 7) + 2 + 3 * (7 + 6 + 2)) + (3 * 5 * 5) + 2
4 * 2 * 2 * 2 * (6 + 4 + 9 + 4 * 5)
((9 * 7 + 7) + 8 * 7) * 4 + (7 + 9 * 9) * 6
8 * (6 * (8 + 4) + (5 + 6) * 6) * 7 + 4 * 7 * 2
(7 + 7 * (8 * 5 + 4)) * 5 * (3 * 6 * 2 * 3 * 9) * 3
4 + (7 * 5 * 3 * 5 + 3 * 5) * 7
(6 + 5 + 6 * 3 * (6 * 4 + 6)) + 2 * 5 * 9 + 3 * 5
3 * (6 + 3 + 5 * 3) + 6 * 3 + (7 + 8) * 9
(3 + 8 + (5 * 4 + 4 + 7) + 5 * 2) + 2 + 5 + 6 * 9 + (4 + 2 + 6)
9 * 8 + (3 + (4 + 2 * 8 + 7 * 5 + 3) + (3 * 3) * 3 + (2 * 8))
7 * 4 + (3 + 7 + 6 + 4 * (3 * 6) * 2) + ((5 + 5 * 5) + 6 + 2 * (2 * 3 * 3 + 3))
9 * 5 * (6 + (2 * 3)) + (3 * 4 + 3 + 9 + 6) + (9 + 5 + 2 + (3 * 4 * 9 * 9 * 5) + 2 * 7) * 5
(6 + 9 * 4 + 5 * 4 * (8 + 2 * 4 * 2 * 3)) + 4 * 9 + 6 * (4 * 5 * 9)
9 * 7 + (2 + (6 + 3) + (4 * 3 + 9) + 9) + 8 + 9 * 3
3 * (8 + 7 + 7 + 8) * (5 + 5 + 2 + 6 + 9 + 7)
7 + (7 * 5 + 3 * 4 * 9 + 2) * (8 * 6 + (5 + 2) + 6) * 4 + (6 * 3) + 2
(4 * 5 + 7 + 3 * (7 * 8) + 8) + 6 * 2 + 9 + 3
7 * 4 * 8 * (7 + 5 + 2) + (8 * 8 * 2) + 3
7 + 7 * (6 + (4 * 7 + 3 + 2 + 7) + 3)
2 + (8 + (5 + 9 + 2 * 6 * 6 + 8) * 8 + 2 * (5 * 2 + 8) * 4) + 2 * 6
(4 * 9 * (7 * 6 * 9 + 8 * 6) * 9) * 2 * 2
3 + (8 + 2 + (2 + 3 * 2) * 6 + (5 * 8 * 8 * 8 + 2 + 3)) * 4 * (9 + 3) * 6
8 + 3 * (3 + 5) + 3 + 5
4 + ((9 * 5 * 2 + 7 + 5) + 6 + 3 + 6 * (7 * 6) + 6) * 2 * 3 * (3 * 9 + 9)
((4 * 9) * 8 * 6) + 8 * 8 + 6 + ((6 + 4 + 7) * (2 + 2 * 4 * 9) + 3 + (5 * 9 + 9 * 9 + 5) + 2)
(8 * 4) + (8 + 8)
((4 + 5 + 2 * 4 * 7 + 3) * 6 * (4 * 6 + 8) * 9 * (9 + 7 + 5 + 3)) * 5
8 * 2 + 8 + (7 * (8 + 2 + 6 * 7 + 9) + (5 + 9 + 3) + 6 * 6) * (8 + (4 * 2 + 4 + 7 * 5) + 2 * 6) * 5
(2 * 5 + (8 * 7 + 9 + 2 + 2)) * 2 + (8 * (2 + 4) + 4 * 5 + 7) + 4
4 + (2 + (4 * 3 * 9) * 5 * 4)
((3 + 4) * 7 + 6 + (5 * 3 * 8 + 8 * 9) * 3 + 6) + 8 * 4 * ((7 + 4 * 3) * (6 + 9 + 9 * 4 * 7) + 9 + 5 + 2 + (5 + 8 * 4 * 6 + 4 * 8))
4 * (9 * 5 * (5 * 7 * 7 + 4)) * 5 * (5 * 7 + (4 * 5) * 4 + 9)
5 + (8 * 6 + 8) + 8
7 + (8 + 6) * 4 + 2
(3 * (9 + 6 * 8)) * 8
3 + 6 + 4 + ((5 + 4 * 2) + 7)
7 * 3 + 5 * (2 * 5 + 4) * 8
5 * 5 + (6 * (8 + 5) * 7) * 7 + 4
7 + 9 + (2 + (3 + 8 + 4) + 9 * 2 + 6) * (7 + (3 + 6 * 8 + 8 * 7) + 9 * 3 * 8 + (9 * 6 + 2 + 8 + 4 * 4))
6 * (2 * 8 + 3 + 5 + 5) + (3 + (8 * 2 * 3) * (2 + 9 * 8 * 5 + 3) + 4 + 7) * 7 + (5 * 5 + 7)
(2 * 2 * 6 * 4 * 9 + (9 * 5 + 7 * 4 + 6 * 2)) * 4 + (4 + (8 * 2 + 3 + 6))
2 + (8 + 4 * 8 + 3) * 6 + 7 + 4
(6 + 6 * (2 * 5 * 5 * 4 * 5 * 4) + 8 * 7 * 3) + 5 + (3 * 6 + 3 * 7) + 5 + 5 * 3
2 * (8 + 2 + 6 * (9 * 9 * 9 + 4 * 2 * 7) * 3 * (4 + 6 * 3 + 8 + 4)) + 8
(6 * 7 + 8 * 6 * 7 + (5 + 9 * 3 + 6 + 9 * 5)) + 2 * 6
(7 + 2 * 4 + 3) + 4 * 5 + 3
((7 * 7 + 2 + 7) + (3 + 3 + 5 + 9 * 3 + 2) * (2 * 4 * 7 + 6 * 3)) * (2 + (7 + 4 + 3 * 9 + 4 * 5) * 4 + 3 * (5 + 8 * 3)) + 5 + (2 + 8 * 2 * 8 * (6 * 7 + 4 + 5)) * (3 * (7 * 6 * 3 * 8)) + 7
3 * 4 * ((8 + 8 + 9) * 6 + 6 + 7 + 6) + 8 + 3
(6 + (7 * 4) + (9 + 6 + 3 * 9)) + 2 * (4 + 6 * 5 + (2 + 8) * 5 + 9) + 3 * (6 + 8 + 8 * (7 * 8 * 3 * 2 + 2 + 8))
(9 + 8 * 4 + (5 * 8 + 7 * 2 * 8 * 9) * 8 + 9) * 3
9 + ((5 * 3 + 6) + (8 + 6 * 6 + 7 + 2 + 8) * 8 + 5 + (9 + 8 + 2 * 9 + 2)) * 7
((8 + 2 + 6 + 3) * 8 + 5 + 8 + 2) * 9
(6 + (4 * 4 * 7 * 2 + 6) * 4 + 2 * 8 * (6 + 2 * 8)) * 2 * 8
3 * (4 + 3 + 3 + (3 * 7 * 7)) + 6 + 7 + 4 + 8
(6 * 8 + 7) * 8 * 9 + 8 + 4
(7 * 7) * 2 + (8 * 7) + 4 * (5 * 2 * (3 + 4 + 7 * 8 * 3) * 9) + 6
7 + (9 * (6 + 8 * 7 + 6 * 3) + 4) * 4 + 3
6 + 3 * ((2 + 2 + 3 + 9 + 9 + 8) * 6 + 2) + 5
3 * 6 * 6 + 2 + 2 + (2 * 2)
6 + (4 + 9 * (5 + 9 * 4 * 6 + 6) + 4 * 6 * (2 * 7 * 7 * 4 + 8)) + 5
((2 + 6) + 2 + 5) + 7 + 3 + 5 * 3 + 5
(6 * (2 + 8 + 7) + 4 * (2 + 8) * 9) + 9 * 6
(2 * (9 * 4 * 3 * 2) + (4 + 4 * 3 + 2)) + 4
(6 + 4 * (5 + 9)) + 7 * 7 * 8 * 5 * 3
(3 + (5 + 4 * 3 + 9)) * 2 * (9 + 6 * 6 * (7 + 8 + 2 * 5) * 8 * 6)
8 + 6 * 6
8 + (8 * 9) + 5
8 + (7 * (6 + 8) * 7 * (5 * 7 * 8 * 7) + (8 + 4 + 6 * 9 + 8) + 4) + (6 * 4) * 3 * 7
9 + 4 + 3 * 7 * 5
(8 + 9) + 6 + 4 * 7
5 * (4 * 6 + 4 + 2 * (5 * 2 * 2 * 8)) * 3
3 * 3 + 2 + ((8 + 5 + 4 + 8 + 8) * 7 * 6 + 9 * 8)
9 + (8 + (8 + 9) + 7 + 8)
(8 + 2) + (2 + 5 + 7) + 6 * 6 * 6 * 6
5 + 7 + (5 + 4 * (5 * 6 + 3 + 3) + (7 * 9 * 5 * 6 * 6 + 3) * 8) * 7
6 + ((7 * 3) * 6 * 5 + 5 + (3 + 3 + 9)) + (6 * 2 + 6 + 9 + (2 + 4 * 3 * 4) + 7)
8 * 5 + (9 * 2 * 7 * 2 * 6 + 8) * 2 + 2 + 6
6 * 8
(2 * 3 + 5 + (8 + 6 * 8 * 7 * 2)) * 3 + 2 + 6 + 2 * 5
(7 + 6 * (2 + 2 * 4 * 9 + 7 * 5) * 4 + 2) + 4 * (9 + 6) + (9 + 5) + 7
5 * (3 + 7 + 7 * 4)
2 * ((2 * 7 * 8 * 4 * 3 + 7) + 6 + 3) * 5 * 7
8 * 4 + 7 + (6 * 4 + 3 + 2) + 7 * 8
7 * 9 + (2 * 9 * 2) * 6
8 + (6 * (2 + 8) + 9) + (7 + 6 + 6 * (8 * 3 * 5 * 5 * 9) + 3 + 7) + 8
2 + 5 * 4 + (4 * (3 + 7 * 5 + 8) * 8 + 2) + 3 * 7
(8 * (9 * 7 + 9 + 9 + 4) * 3 + 2) * 8
4 + (6 + (2 + 4 * 6) + 4)
(8 * (4 + 6 + 2 * 6 + 7)) * 9 + 8 + 3 * 5
((2 * 7 + 3 * 5) * (5 + 7 + 7 + 3 * 7 * 3) * 8) * 2 * ((2 * 9 * 4 * 6 + 4) + 6 + (8 * 5 * 4 * 5 * 6 * 8) + 7 * (9 * 6 + 7 * 3 + 4 + 7)) + 9
6 + 8 + (3 * 3 + 2) + 5 + 4
5 * 6 + 6 * 5 * ((3 + 5 * 8 + 4 * 8) * 9 * 9 + 6 * 4 + 6) + (4 * 7 * 5 + 9 + 7)
2 * 7 * (4 * 7 + (4 + 7 + 4 + 3 * 2 + 7) + 7)
((8 + 3 * 6 * 6 + 4) + (9 + 5 + 3 * 3) + 7 * (3 * 4 + 4 + 9 * 4 + 6) + (8 + 5 + 2 * 2 * 5)) * 8 * 6 * 7 + ((5 + 6 + 2 * 4 + 2) * (9 + 8 + 9) + 6 + (6 * 5 * 9 + 7) * 4 * 6) * 7
4 * 5 * (9 * 3) + (9 + 6 + 5 * 8)
3 * 8
9 + 2 * (7 + (2 + 9) * 9) + 4 * 4 * 8
(8 + 4 + 7 * 2 + 8 * (8 + 7 * 4 + 4)) + 4
4 + 8 + ((7 * 9 + 9) + 3 + 2 + 3) * 8
(6 + (4 + 3 + 8 + 6 * 8)) * (5 + 9 * (5 + 2 * 7 + 8) + (6 * 7 * 4 + 2 * 5) + 4 * 9) * 8 * 5
8 + 3 + 4 * 9 * ((4 * 9 + 3 + 6) + 3 * 3 + 9) * 2
6 + ((3 * 2) * (4 + 9 + 9 * 5 * 2) * (2 * 8 + 4 * 7 + 4 + 8)) * 5 + (9 * 4 * 6 + 6 * 4 + 8)
2 + (5 + 4 * 8) + (9 * 9)
8 * 3 + 7 * 3 + ((2 * 2 + 6 * 3) * 3 * 7 * 8 + 5) + 9
4 * 7 + ((6 + 7 * 3 * 4 + 8) * 2 + 6 + (4 * 6 + 9 + 6 * 8 * 3) + 3 * 3) + 3
5 * (9 * 9 + (7 + 6 + 2 + 9 + 9 + 9)) * 8
5 + 4 * 2 + 7 * (5 * 5 + 2 + 3)
2 * 2 + 6 + ((2 + 2 + 5) * 6 * (2 + 7 + 3 * 9) * 5 + 9 * 8)
((2 * 4 + 7) + 9 * 8) + 5 * 6 * 2 + 9
6 + ((7 * 9 * 9 + 2) * 2)
6 * (7 + (4 + 7 * 2) * 5 + 2 + 7) + 6 * 7 + 5
8 * (6 * 8 + (7 + 2 + 7) + 3) + 7 + 6
(7 * 2 * 3 * 7) + 4 * 3 + 6 * 9 + 7
8 * 7 * (8 * 9 * 3)
9 + (9 * 4 * (9 + 3 * 5 + 9 + 9) * 8 + 5 + 9)
6 * (9 * 2 * 9 + 6 + 9 + 8) + (6 * 9 * 5) + 2 * 4
2 * 5 * (7 + 8 + 3 + 8 + 6 * 4) * 4 + 5
2 * 2 * (4 + 3) + 2 + 4 * 4
(6 * (9 * 6 + 2 * 2) * 4 * 3 * 4 * 7) + 2
(2 * 5) * 3 + 3 * 3 * 7 * 8
3 + 6 + ((6 * 6) * (9 + 8 * 2) * 7 + 5 + 9 * 2)
9 + 7 + (2 * 8)
(8 * 7) + (8 + 6 * 7 + (3 * 9 + 6) * 6 + 8) + (4 * 2 * 9)
2 + 2 + 2 + 9 * ((4 + 5 * 7 * 5 * 4 * 7) * (9 + 9) + 4 * 4 + 9) * 8
4 + 2 + ((6 + 8 * 4 + 7) * 7 + 3 * 9 + (9 + 5))
7 + 8 * (3 * (3 + 9 + 6 * 5) + 6 * 8) * 7 + 4
8 + 7 * (2 * (5 * 7)) + (4 * 3 + 7)
(2 + 8 * 7) + ((8 * 9 * 3 + 3 + 5 * 7) * 2 * (9 + 6 * 3 * 5) * 4 * (4 + 6 * 6 + 4 * 9) * 3) * 6 + 4 * 4 + 2
3 * (9 + 4 + (9 + 5 + 8 + 6 * 3 * 4) * 8 + (9 * 3 + 8 + 4 + 7)) * 8
(4 + 4 * (4 * 7)) * 2 + 7 * 3
((4 * 9) * (9 + 6 + 9 * 8 + 7)) + 6 + 7 + 7
6 + ((9 * 5 + 9 + 6 * 6 + 4) * 7 + (9 + 5 + 5) * 9 + 3) * (5 * 9) + 8 + 9
(3 + 8 * (7 * 3 * 4)) * (6 * (6 + 4) + (9 + 8) * (2 * 5 + 4) + (8 + 5 * 6 + 5 * 2 + 2)) * 6 + 9 + (7 + 6 * 5) + (5 + 4 + (6 + 8 * 2) * 2)
4 * ((6 * 8 + 7 * 6 + 4) + 4)
((5 * 6) + 4) + (9 + 4 + 9) + 2
5 * 9 * 7 * 6 + (9 * 7)
5 + (2 + 7) * 5 + 9 + 7
6 * 2 * 8 + 4
(3 + 2 * 4 + 8) + ((7 * 5 + 7 * 2 * 8) + 7 + 2) * 6 * 2 + 5
(2 * 5) * (3 * 9 * 4 * 8 + 5 * 3) * ((9 + 5 * 6 * 3) + 3 * 7 + 4) * 5
((3 + 6 * 3) * (4 + 9 * 5 * 6 + 4 * 7)) + ((8 * 7 * 2 + 7) + 5 * 6) * 6 + 7
(8 + 4 * 8 * 8) * 9 * 9 + 7 + 4
(7 * 9 + 5) * 5 + (9 + 4 + 4 + (7 * 9 * 2 * 8 * 2 + 9)) * ((7 * 5 * 7 * 3 * 7) * 5 * 2) + 8
5 + (6 * (8 + 9) * 7 + 9) + 3 + 3
8 + 8 * (6 * 5 * (3 + 5 + 9 * 2 * 9 * 7))
5 * (4 + 7) * 5 + 7 + 8 + 6
3 * ((5 + 6 + 2 + 7) * 4 * 6) * 5 * 5
(6 + 3 * (9 * 9 * 7 * 8 * 9 + 9) + 5) * 8 * 6 + 7 + 2
8 * (4 + 3 * 5 + (5 + 2 * 3 + 8) * 2 + (8 + 7 * 7 + 4 * 7 + 7)) + 8 * 6 + 4 * 5
4 + 7 * 8 * (2 + 6 + 5) * (4 + 8 + 4)
9 + 8 * ((2 * 3 * 6 + 4 * 2) + (6 * 5 * 9 + 7) * 5 * 2 * 9 * 7) + (9 + 4 * (2 * 8 * 7) * 3 + (9 + 8)) + 3 + 6
7 * 3 * 8 + ((6 + 7) * 9) * 2
5 + 3
4 + 9 * 7 * ((7 * 8 + 7 * 2 + 5 * 7) + 5 * 4) + (5 * 5 + (7 * 6) * 6)
((2 + 4) * 5) * 3 + 5
5 + (2 + 8 * 9 * 6 * 2 * (2 + 8 + 3 + 5)) * 9 * 8 + 3 * (9 + (4 + 2 + 4 + 7 * 4) * 9 * 9 + 7)
2 + 6 * 9 + 3 + (7 + 8 + 2) * 4
5 * 4 * (2 * 4 + 3 + 3 * (9 + 6 + 6) + (3 * 8 * 4)) * 4 * 3 + (9 * 7)
7 * (5 * 5 + 4 + 8 + (3 * 4 + 6 + 9)) * 2 * 9 * (6 + 7)
2 + (5 + 3 * 5 * 8) + 3 * 8 + (9 + 9 * 8 * 2 * 2)
((7 + 9 * 9) * 7 * 2) + 6 * 6 * 9
(6 * (9 + 9 + 4 + 5 + 6 + 2) + 6 + 8 + (7 * 3 * 8)) + 2 + 6 + 2
(3 + (6 * 2 + 2 + 6 * 7 + 8) * 9 * 2) * ((2 + 9) + 8 * 9 + 2) + 3 * (3 + 4 * 7 * (3 + 2 * 8 * 6 + 7) * (5 + 3)) * 5
(9 * (9 * 9 + 7 * 4) + (7 * 4 * 7 * 5) * (9 * 2 + 8 + 5 * 6)) * (6 * (7 + 9 + 6 * 7 + 9) + 4 * 4 * 2 + 6) * 9
4 + (3 + (4 + 5)) + 7 * (6 + 4 * (5 + 3 + 9 + 5 + 2) * 4 + 4) + 8 + 8
((5 + 8) + 5) * 9 + 6 + 8 * 7
8 * (5 + (3 * 3 + 6 * 3)) * 5 + 2 + 8 * 8
6 * 2 * 9 * (8 * 7 * (2 * 4 + 6 + 7 + 4 * 5)) + 9 + 7
(5 * 3 * (8 * 2 * 8 + 2 + 8) * (8 + 8 + 9 * 7 * 6 * 3) + (4 * 2 * 7) * 4) + (4 * 3 + 9 * 5) + 5 + (5 + 9)
(6 + 3) * 5 + (6 + 7 + 5 + 7)
(9 * (6 + 6 * 8 + 4) * (3 * 6 + 6 + 7 + 7 + 5) + (5 * 7 + 4) * 9) * (7 + 3 + 7 * 2 + (5 + 7 * 6 + 8) * 4) * 7
6 + 8 * (5 * 5 + (3 * 2 * 2 * 7 + 4 * 9) * 7 + 4) + 8 + 4
9 + (5 * 7) * (5 * 6 * 8 * (5 * 2) + 9) * (6 + 3 + 6 + 9 + 2) * 6
8 * (8 + 8 + 9 + 9 * 6 * 3) + 8 * (3 * 3) + 3 * 3
7 * 7 * (5 + 5 * 9) + (6 * 6 * 3 * 4 * 8 + 8) + 3
(3 * 2) + 5 * (6 * (9 + 2 + 3 + 2 * 9 + 5) + 6) + 2 + 7 * 9
9 * 2 + 3 + (3 * 7) + 4
7 * 5 * 7 * (4 + 3 * 7 + 3 + (4 * 5 + 5) + (5 * 8)) * (8 * 3 * (8 + 9))
((3 * 8 * 8 + 6 + 5 * 5) + 3 + (3 * 8 * 7)) * 2 * (9 + (9 * 8) * 5) * 5 * 4 + 7
4 * 9 * (4 + (3 * 7) + (6 * 4 * 9)) + 2 + 8
5 * ((7 + 2 + 6 + 6) * 2 + 4 * 8)
5 + 9 * ((7 + 2) * 5 * 4 * (5 + 7) + (8 + 4 * 8 * 7 * 9))
((4 + 3) + 6 * 3) * (4 * (4 * 6) * 3 * 2 + 8 * 4) + 8
5 + (6 + 3 + 6 * 8 * 7 * 2) + 3 * 9 + (8 + 2 + 6 * (4 + 6 * 6 * 8 * 3 * 3)) + 7
7 + (8 + 8 * (8 + 3 * 3 * 5 + 2)) + 4 + (2 + 3 * 7 * 7 + 6 + 2) * 9
7 * 3 * 2 + 6 + 7 * 4
(3 + 4 * 7 + (8 * 3 * 5 * 8 + 5 * 3) * (7 + 4 * 8 + 9)) + 8 + (4 * 3 * 4) * (6 + 4 + 8) + 5 + (9 + 6 + 2 + 4)
((3 + 9 + 5) * 7 * 2 * (3 + 7)) + 5 + 3
(4 * 9 + 3 + 9) * 8 * 8 + ((7 * 2 + 6 * 2 * 2) + 8 * 3 * 2 + 2 + 6) * 3 + 7
(5 * 6 * (8 + 8) + 2) + 6 + 2 * (5 + 4) + 2
(3 * 8 + 2 + 5 + 6 + 6) + (8 + 7 + 9 * 4 * 4 + (4 * 4 + 4 * 7 + 7)) * 4
(7 * 7 * 4) * 7 * 3 + 6
(9 * 3 + 7) * 7 + 4 + 2 * 7 * 3
6 * 9 + (6 * 6 + 6 * (3 * 9 + 7))
5 + 6 * 7 + 8 + (3 * 3 + 5 + 3 + 6) + 8
(6 + 4 + 6 * 9) + (3 * (6 * 3 * 2 + 2 + 9)) + (2 + 9 + 8 * 3 * 8 + 9) + 4 + (4 + 4 + 7)
4 + 3 * ((6 * 3 * 2) + 3 * 3 + (6 * 4 + 5 * 5 * 7) * 6 + 3)
2 + (7 * 5 * 6 + 8 + 4 * 8) * 3 * 6 * 3
9 * (8 * (6 * 7 + 7) * 3 + 9) + 7 * 5 + 6
((3 * 5) + 2 * 4 * 2) * 7 + (4 + (4 * 2 * 6) + 2) + (3 + 5 * 8 + 6) + (5 + 2 * 6) * 2
8 + 9 * (4 + 6 + 9 + 2 + 4 + 6) * (9 + 4 * 5) * 2
(6 + 9 + 4 + 7 * 7 + (6 + 5 + 4 * 6 + 4 * 5)) * 3 + 7 + (2 + 9 + 7 + 8 + 4 * 5)
(6 * 7 * (7 * 7 + 3 * 9 + 4 * 2) + 8 * 7) * 3 * 2
(7 * (5 * 2 + 2 + 8 * 4 + 6)) + 7 + 7 * 8 * 7 + 2
(8 * 6 * (4 + 6 * 8 * 8)) * 8 + 4
(4 + 7) * (7 * 4 + 4 + 5 + (9 * 9 * 4 * 5) + 8) + 4 + (8 * 9 + 2 + 4 * (2 * 2 + 8) * (5 * 7 * 4 * 6 + 2)) + 6
4 * (8 * (2 * 5) + 4 * (7 * 2 + 7 + 8) * 7) * 4 * 9 * 7 + ((5 * 4 * 5 + 7 + 9) + 7 * 7 + (6 * 3 + 8 + 7 * 4) + (6 + 4 * 3))
((3 + 4 + 7 * 8 * 5) * 9 * 6) + 6 + 3
((7 + 3 * 8) * (3 * 7 + 4 * 3) + 5 + 2 * 9) * 8 + 4 + 2
((3 + 8 * 8 + 9) * 5 * (5 * 6 + 5 + 7)) + 2 * (6 * 5 + 4 * 6 * 4 * 8) * 9 * 7
4 + 9 * 8 * ((8 * 6) + 7 * 2 + 2 * 6)
(2 * 3 * 3) + 4 * 8 * (3 * 5)
(8 * (5 + 9) + (5 * 6 * 7 * 2) + 4 + 4 + (6 * 9 + 8 + 7 + 2)) * 7 * 2 * 6 + 2 * 2
(8 * 9 * 7 + 3 * 6) + 5 + 4 * ((9 + 8) + (3 + 7 + 6 * 2) + (7 * 5 * 9 + 5) * 8 * 3) + (6 + 9 * (6 * 8) + 2 + 4 * 4)
6 + 8 * 9 + (4 * (9 + 2 + 3 + 5 + 3 + 8) + (3 + 7 * 4) + 4 * 7 * (6 + 2))
2 + 4 * 7 * 5 + (8 * 3) + 6
9 + 9 + 4 + (4 * 3 + 3 * 2 + (7 + 2 + 9 + 8) + 4)
3 * 7 * 7 * 9 + 7
(3 * 2 * 3 * 5 + 6) + 4 * 5 + 8 + 5
7 * 6 + 7 * 8 + 8 * 3
(6 + 2 + (6 * 8 * 5) * 6 + 3 * (8 * 5 * 9 * 2 * 7 + 4)) * 3
(8 + (4 + 2 * 3 + 7 * 5) * 9) * 3 + 9 + 4 + 6
(9 + 6 + (6 + 3 * 2 + 8 * 5 + 7) + (8 + 8 * 3 + 9 * 4 * 8) + 6 * 2) * (7 + 9 + 5 + 8) * 7 + 4 * ((6 * 5 * 7 + 7 * 9 * 3) + (2 * 4 + 4 * 2))
(5 * (3 + 5 + 5 * 6) * 7) + 8 + 3 * 4 + 7
3 * 7 * (9 * 5 + 9 + 7) + 9 * (3 * 4 * 4 * (8 * 4 + 2 + 5)) + (9 * (5 * 3 * 4 * 9) + 5 * 8 + 9 * 5)
6 + 7 + ((2 * 4 * 5 + 7) * 2 * (8 + 8 * 4 * 3) * 3) * 5 * 6 * 4
7 * (9 * 6 * 4) + 7 + (8 * 2 * 7 * 4 + 8)
4 + 7 * (8 * 4 * 2 * (2 + 5 + 9 + 5 * 2 + 5) * (5 * 6 + 2 * 5 + 9) + 3) * 9 * (3 * 6 + 3 * (4 * 4 * 6 + 6 * 2 * 9)) + 8
2 + 6 * (8 + 9 + 6 + 2 * (9 + 4 * 7 * 5 + 5)) * (7 * 7 * 2 * 9)
4 * 3 + (8 * (6 * 8 + 8 + 6) + 3) + 5
(5 + 6) + (2 + 6 + 4 + 8)
(9 * 5 * 3 + 6 * 6) + (5 * 4)
3 * 2 + (7 + 7 * 2 + (6 + 6 + 2 * 8 * 4) * 3) * 8
(4 * 6 + 6) + 4 * 9
6 + (9 * 3 * 3 * 3) + 8
(5 + (9 + 6 + 3 + 7 * 3 + 5)) + 5 + (4 * 3 + 4) * 9 * 3
(6 + 8 * (8 + 3 * 2 + 4 + 5 + 9)) * 7
6 + 3 * 3 * 5 + ((7 + 4 * 8) + 2 * 7 + 4 * (5 + 8) * 8) + ((5 * 4 * 2) * 4 * 5 + (3 + 4 + 4 * 7 + 7))
2 * 3 * 3 * 4 * 7 + 2
6 * (7 + 9 * 9 + (9 * 6) + 5) + 4
8 * (2 * 7 + 5 * 5 + 8) + 5
(4 * 5) + (3 + 3 * (5 * 9 + 8 * 2) + 6 * 4 + 4) * 5 + 6
4 * 9 + (3 + 3 * 2 + (2 + 4 * 4 * 7 * 7 + 5) * 9) * 5 * 3
(5 * 3 * 6 + 8 + 2 + 4) * 6 * 8 * ((6 * 2 + 2 * 4 + 6 * 2) * 6)
4 * (5 * 4 * 6 + (7 + 3 * 9 + 3)) + (3 * 4 + 4 + (5 + 7 * 6 * 2 + 7) + 3)
3 * (5 + 2 * 6 + 8 + 5) + ((8 + 3 * 6 + 8 * 3) * (7 * 7)) + 8 * 4 * 5
4 + (8 + 6 * (4 + 3)) * 4 + 4
4 * 3 * (3 + (8 * 9) * (9 * 7 * 4 * 9 * 4 * 8) * (5 + 2 + 2 + 2))
8 + (2 + 2 * 5 * 3 * (4 * 3 + 7 + 6 + 3)) + 7 * 2 * 5 * 5
4 * (7 * 9 * (2 * 2 * 5) + 2 + 8 * (6 + 2)) * 4 * 7 * 8
(2 * 3 * 3 * 2 + (9 * 8 + 5 + 4)) + 7 * 2 * 6
((6 * 7 + 3 + 3 * 4) * (5 + 9 + 5) + 7 * 6) + 9
6 * 9 + 8 + 3 + 6 * (6 * 9 + 9 + 3 * 2 * 2)
(3 * 5 + 2 + 9) * (6 + 9 + (6 * 8 + 2 + 8 * 3 + 8) + (2 + 6 + 6 + 6 * 3)) * ((7 * 5 * 9) * 3 + 9 + 3 + 8 * 2) * 8 * 6 + 8
3 * (4 + 4 + 6 * (5 + 7) * 8) * (3 * (6 * 7 + 3 + 7 + 7) + 7)
6 * 8 + 8 * (6 + 9 + 5) * 7 + 7
3 * (8 + 5 + 8 * 7 * 7 * 8) + 7 + 9 * 4 + 9
(4 + 5 + 7 + 6) * (9 * (6 * 3 + 9 + 3 + 3) + 6 * 8 + (2 * 8 * 4 + 7 + 5 * 4))
7 * 2 + 3 * (5 + 9) + 7 * 3
7 * 8 + 5 + 7 * 4 * ((7 * 4 + 8 * 8) * (6 + 5 * 8 + 7 + 5 * 3))
(7 * 4 + 3) + (7 + 9 * 7 * 9 * (3 + 2 * 2 * 8 * 2 * 6)) + 5 * 3 + 3 + 3
5 + 6 * (3 + 6) * (6 + (7 + 2) * 3 + (8 * 6 + 3 + 8 + 5 * 9)) * 7
(9 + 6 + 8) + 3 + 5 + 2 + (3 * 9 + (8 + 3) + 7 * 3)
6 + (9 + 7 * 2 * (8 * 9 * 2 + 7 + 6 * 7) * 6)
2 + 4 * ((7 * 2 + 4) * 8) + 9 * 3 * 3
3 + ((5 + 4) * 4 * 7 * (3 + 5 * 4 + 3) + 3)
(7 + 4 * 3 * 6 * 7 * 5) * 2 * 7 + 4
(7 * (7 * 9) + 8 + 2 * (6 + 9 + 9 * 2 * 5) + 7) * 7 * 7 + 9
(2 * 5 + 9 * 5) * 3
3 * 9 + 5 + 7 * 9 + 6
9 * 3 * ((3 * 6 + 4 + 8) + 9 + 2) * 3
8 * 3 + 6 * 8 * 2 + 4";
    }
}
